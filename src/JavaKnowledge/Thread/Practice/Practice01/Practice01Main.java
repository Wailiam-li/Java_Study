package JavaKnowledge.Thread.Practice.Practice01;

/*
     线程安全问题练习：
     需求:
         某电影院目前正在上映国产大片，共有100张票，而它有3个窗口卖票，请设计一个程序模拟该电影院卖票

 */
public class Practice01Main {
    public static void main(String[] args) {
        /*
          思路： 每个售卖窗口为一个进程，每卖一张票，线程总数减1
         */

        //创建线程任务
        Thread01 t = new Thread01();

        //创建线程（售票窗口）
        Thread t1 = new Thread(t, "窗口1");
        Thread t2 = new Thread(t, "窗口2");
        Thread t3 = new Thread(t, "窗口3");

        t1.start();
        t2.start();
        t3.start();

        /*
          问题待解决：1.如何让票一次次减少？  第一步：使用static关键字


    2.出现的问题：
    （1）相同的票出现多次
         原因：线程的执行具有随机性，在执行的线程有可能随时被其他线程抢走，也就是那个打印输出时，也可能执行到一半被其他线程抢走。
     2）出现了超出范围的票
                 和上述原因相同，到某一步时，改变了变量后 执行权被其他线程抢走了，导致都改变了的变量，但都没有往下继续执行；

——————>解决问题：加“锁”，将操作共享数据的代码锁起来。  使得每一个线程轮流执行。
                特点1：锁默认打开，有一个线程进去了，锁自动关闭；
                特点2：里面的代码全部执行完毕，线程出来，锁自动打开；
         */





    }
}
